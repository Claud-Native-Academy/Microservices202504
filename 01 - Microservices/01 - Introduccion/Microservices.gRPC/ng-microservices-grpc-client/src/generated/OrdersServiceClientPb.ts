/**
 * @fileoverview gRPC-Web generated client stub for orders
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.30.2
// source: orders.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as orders_pb from './orders_pb'; // proto import: "orders.proto"


export class OrdersServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOrder = new grpcWeb.MethodDescriptor(
    '/orders.OrdersService/CreateOrder',
    grpcWeb.MethodType.UNARY,
    orders_pb.CreateOrderRequest,
    orders_pb.OrderResponse,
    (request: orders_pb.CreateOrderRequest) => {
      return request.serializeBinary();
    },
    orders_pb.OrderResponse.deserializeBinary
  );

  createOrder(
    request: orders_pb.CreateOrderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<orders_pb.OrderResponse>;

  createOrder(
    request: orders_pb.CreateOrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: orders_pb.OrderResponse) => void): grpcWeb.ClientReadableStream<orders_pb.OrderResponse>;

  createOrder(
    request: orders_pb.CreateOrderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: orders_pb.OrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/orders.OrdersService/CreateOrder',
        request,
        metadata || {},
        this.methodDescriptorCreateOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/orders.OrdersService/CreateOrder',
    request,
    metadata || {},
    this.methodDescriptorCreateOrder);
  }

  methodDescriptorGetOrder = new grpcWeb.MethodDescriptor(
    '/orders.OrdersService/GetOrder',
    grpcWeb.MethodType.UNARY,
    orders_pb.GetOrderRequest,
    orders_pb.OrderResponse,
    (request: orders_pb.GetOrderRequest) => {
      return request.serializeBinary();
    },
    orders_pb.OrderResponse.deserializeBinary
  );

  getOrder(
    request: orders_pb.GetOrderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<orders_pb.OrderResponse>;

  getOrder(
    request: orders_pb.GetOrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: orders_pb.OrderResponse) => void): grpcWeb.ClientReadableStream<orders_pb.OrderResponse>;

  getOrder(
    request: orders_pb.GetOrderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: orders_pb.OrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/orders.OrdersService/GetOrder',
        request,
        metadata || {},
        this.methodDescriptorGetOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/orders.OrdersService/GetOrder',
    request,
    metadata || {},
    this.methodDescriptorGetOrder);
  }

  methodDescriptorUpdateOrder = new grpcWeb.MethodDescriptor(
    '/orders.OrdersService/UpdateOrder',
    grpcWeb.MethodType.UNARY,
    orders_pb.UpdateOrderRequest,
    orders_pb.OrderResponse,
    (request: orders_pb.UpdateOrderRequest) => {
      return request.serializeBinary();
    },
    orders_pb.OrderResponse.deserializeBinary
  );

  updateOrder(
    request: orders_pb.UpdateOrderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<orders_pb.OrderResponse>;

  updateOrder(
    request: orders_pb.UpdateOrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: orders_pb.OrderResponse) => void): grpcWeb.ClientReadableStream<orders_pb.OrderResponse>;

  updateOrder(
    request: orders_pb.UpdateOrderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: orders_pb.OrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/orders.OrdersService/UpdateOrder',
        request,
        metadata || {},
        this.methodDescriptorUpdateOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/orders.OrdersService/UpdateOrder',
    request,
    metadata || {},
    this.methodDescriptorUpdateOrder);
  }

  methodDescriptorDeleteOrder = new grpcWeb.MethodDescriptor(
    '/orders.OrdersService/DeleteOrder',
    grpcWeb.MethodType.UNARY,
    orders_pb.DeleteOrderRequest,
    orders_pb.DeleteOrderResponse,
    (request: orders_pb.DeleteOrderRequest) => {
      return request.serializeBinary();
    },
    orders_pb.DeleteOrderResponse.deserializeBinary
  );

  deleteOrder(
    request: orders_pb.DeleteOrderRequest,
    metadata?: grpcWeb.Metadata | null): Promise<orders_pb.DeleteOrderResponse>;

  deleteOrder(
    request: orders_pb.DeleteOrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: orders_pb.DeleteOrderResponse) => void): grpcWeb.ClientReadableStream<orders_pb.DeleteOrderResponse>;

  deleteOrder(
    request: orders_pb.DeleteOrderRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: orders_pb.DeleteOrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/orders.OrdersService/DeleteOrder',
        request,
        metadata || {},
        this.methodDescriptorDeleteOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/orders.OrdersService/DeleteOrder',
    request,
    metadata || {},
    this.methodDescriptorDeleteOrder);
  }

  methodDescriptorListOrders = new grpcWeb.MethodDescriptor(
    '/orders.OrdersService/ListOrders',
    grpcWeb.MethodType.UNARY,
    orders_pb.EmptyRequest,
    orders_pb.ListOrdersResponse,
    (request: orders_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    orders_pb.ListOrdersResponse.deserializeBinary
  );

  listOrders(
    request: orders_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<orders_pb.ListOrdersResponse>;

  listOrders(
    request: orders_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: orders_pb.ListOrdersResponse) => void): grpcWeb.ClientReadableStream<orders_pb.ListOrdersResponse>;

  listOrders(
    request: orders_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: orders_pb.ListOrdersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/orders.OrdersService/ListOrders',
        request,
        metadata || {},
        this.methodDescriptorListOrders,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/orders.OrdersService/ListOrders',
    request,
    metadata || {},
    this.methodDescriptorListOrders);
  }

}

