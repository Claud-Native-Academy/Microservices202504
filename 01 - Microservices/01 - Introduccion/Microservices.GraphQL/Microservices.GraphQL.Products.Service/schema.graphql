schema {
  query: Query
}

type Category {
  id: Int!
  name: String!
  products(where: ProductFilterInput @cost(weight: "10")): [Product!]!
}

type Product {
  id: Int!
  name: String!
  price: Decimal!
  categoryId: Int!
  category: Category!
}

type Query {
  categories(where: CategoryFilterInput @cost(weight: "10") order: [CategorySortInput!] @cost(weight: "10")): [Category!]! @cost(weight: "10")
  products(where: ProductFilterInput @cost(weight: "10") order: [ProductSortInput!] @cost(weight: "10")): [Product!]! @cost(weight: "10")
  productById(id: Int!): Product!
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  or: [CategoryFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  products: ListFilterInputTypeOfProductFilterInput
}

input CategorySortInput {
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
}

input DecimalOperationFilterInput {
  eq: Decimal @cost(weight: "10")
  neq: Decimal @cost(weight: "10")
  in: [Decimal] @cost(weight: "10")
  nin: [Decimal] @cost(weight: "10")
  gt: Decimal @cost(weight: "10")
  ngt: Decimal @cost(weight: "10")
  gte: Decimal @cost(weight: "10")
  ngte: Decimal @cost(weight: "10")
  lt: Decimal @cost(weight: "10")
  nlt: Decimal @cost(weight: "10")
  lte: Decimal @cost(weight: "10")
  nlte: Decimal @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input ListFilterInputTypeOfProductFilterInput {
  all: ProductFilterInput @cost(weight: "10")
  none: ProductFilterInput @cost(weight: "10")
  some: ProductFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ProductFilterInput {
  and: [ProductFilterInput!]
  or: [ProductFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  price: DecimalOperationFilterInput
  categoryId: IntOperationFilterInput
  category: CategoryFilterInput
}

input ProductSortInput {
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
  price: SortEnumType @cost(weight: "10")
  categoryId: SortEnumType @cost(weight: "10")
  category: CategorySortInput @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal